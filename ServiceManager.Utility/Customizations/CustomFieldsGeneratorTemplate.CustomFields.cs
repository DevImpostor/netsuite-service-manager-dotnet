 
//~ Generated by CustomFieldGeneratorTemplate.tt
#pragma warning disable 1591

using System;
using System.ComponentModel;
using com.celigo.net.ServiceManager.SuiteTalk;

namespace Celigo.ServiceManager.Utility.Customizations
{
	public static partial class CustomFields
	{
		public static CustomFieldRef Create(string typeName)
		{
			CustomFieldRef fieldRef;
			switch (typeName)
			{
				case "StringCustomFieldRef":
					fieldRef = new StringCustomFieldRef();
					break;
				case "DoubleCustomFieldRef":
					fieldRef = new DoubleCustomFieldRef();
					break;
				case "MultiSelectCustomFieldRef":
					fieldRef = new MultiSelectCustomFieldRef();
					break;
				case "SelectCustomFieldRef":
					fieldRef = new SelectCustomFieldRef();
					break;
				case "DateCustomFieldRef":
					fieldRef = new DateCustomFieldRef();
					break;
				case "BooleanCustomFieldRef":
					fieldRef = new BooleanCustomFieldRef();
					break;
				case "LongCustomFieldRef":
					fieldRef = new LongCustomFieldRef();
					break;
			
				default:
					throw new ArgumentException(typeName + " is not a valid Custom Field type.");
			}
			return fieldRef;
		}
	}
	
	public static partial class CustomFieldRefExtensions
	{
		public static void SetValue(this CustomFieldRef field, object value)
		{
			if (field is StringCustomFieldRef)
				((StringCustomFieldRef)field).SetValue(value);
			else if (field is DoubleCustomFieldRef)
				((DoubleCustomFieldRef)field).SetValue(value);
			else if (field is MultiSelectCustomFieldRef)
				((MultiSelectCustomFieldRef)field).SetValue(value);
			else if (field is SelectCustomFieldRef)
				((SelectCustomFieldRef)field).SetValue(value);
			else if (field is DateCustomFieldRef)
				((DateCustomFieldRef)field).SetValue(value);
			else if (field is BooleanCustomFieldRef)
				((BooleanCustomFieldRef)field).SetValue(value);
			else if (field is LongCustomFieldRef)
				((LongCustomFieldRef)field).SetValue(value);
			else if (field != null)
				throw new NotSupportedException(field.GetType().Name + " is not supported.");	
		}
		public static void SetValue(this DoubleCustomFieldRef field, object value)
		{
			if (field != null && value == null)
			{
				field.value = default(Double);
			}
			else if (field != null)
			{
				var converter = TypeDescriptor.GetConverter(typeof(Double));
				if (converter.CanConvertFrom(value.GetType()))
				{
					field.value = (Double)converter.ConvertFrom(value);
				}
			}
		}
		public static void SetValue(this BooleanCustomFieldRef field, object value)
		{
			if (field != null && value == null)
			{
				field.value = default(Boolean);
			}
			else if (field != null)
			{
				var converter = TypeDescriptor.GetConverter(typeof(Boolean));
				if (converter.CanConvertFrom(value.GetType()))
				{
					field.value = (Boolean)converter.ConvertFrom(value);
				}
			}
		}
		public static void SetValue(this LongCustomFieldRef field, object value)
		{
			if (field != null && value == null)
			{
				field.value = default(Int64);
			}
			else if (field != null)
			{
				var converter = TypeDescriptor.GetConverter(typeof(Int64));
				if (converter.CanConvertFrom(value.GetType()))
				{
					field.value = (Int64)converter.ConvertFrom(value);
				}
			}
		}
	}
}
