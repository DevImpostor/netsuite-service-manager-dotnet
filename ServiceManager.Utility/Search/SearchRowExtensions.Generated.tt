<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="$(TargetDir)ServiceManager.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="com.celigo.net.ServiceManager" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>//~ Generated by SearchRowExtensions.Generated.tt
using System;
using System.Linq.Expressions;
using com.celigo.net.ServiceManager.SuiteTalk;

namespace Celigo.ServiceManager.Utility.Search
{
	public static partial class SearchRowExtensions
	{
<#
	// Genenrate Get Methods
	var assembly = typeof(NetSuiteServiceManager).Assembly;
	var query = from t in assembly.GetTypes()
				where t.BaseType == typeof(SearchColumnField)
				select t;
	
	foreach (Type searchColumnType in query)
	{
		var searchValueProperty = searchColumnType.GetProperty("searchValue");
		Type retValueType = searchValueProperty.PropertyType;
		bool nonNullable = retValueType.IsPrimitive || !retValueType.IsClass;
#>
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, <#= searchColumnType.Name #>[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new <#= searchColumnType.Name #>() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, <#= searchColumnType.Name #>[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static <#= retValueType.Name #><#= nonNullable ? "?" : "" #> Get<T>(this T basic, Expression<Func<T, <#= searchColumnType.Name #>[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0<#= nonNullable ? " && value[0].searchValueSpecified" : "" #>)
				return value[0].searchValue;
			else
				return null;
		}
<# 
		if (nonNullable)
		{
#>
		
		/// <summary>Get the value of the specified search column</summary>
		public static <#= retValueType.Name #> Get<T>(this T basic, Expression<Func<T, <#= searchColumnType.Name #>[]>> getter, <#= retValueType.Name #> defaultValue) where T : ISearchRowBasic
		{
			if (basic == null)
				return defaultValue;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0<#= nonNullable ? " && value[0].searchValueSpecified" : "" #>)
				return value[0].searchValue;
			else
				return defaultValue;
		}
		
<#
		}
	}
#>	
	}
}