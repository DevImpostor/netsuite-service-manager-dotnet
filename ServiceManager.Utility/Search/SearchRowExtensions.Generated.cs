//~ Generated by SearchRowExtensions.Generated.tt
using System;
using System.Linq.Expressions;
using com.celigo.net.ServiceManager.SuiteTalk;

namespace Celigo.ServiceManager.Utility.Search
{
	public static partial class SearchRowExtensions
	{
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnEnumSelectField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnEnumSelectField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnEnumSelectField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static String Get<T>(this T basic, Expression<Func<T, SearchColumnEnumSelectField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0)
				return value[0].searchValue;
			else
				return null;
		}
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnSelectField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnSelectField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnSelectField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static RecordRef Get<T>(this T basic, Expression<Func<T, SearchColumnSelectField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0)
				return value[0].searchValue;
			else
				return null;
		}
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnDateField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnDateField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnDateField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static DateTime? Get<T>(this T basic, Expression<Func<T, SearchColumnDateField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return null;
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static DateTime Get<T>(this T basic, Expression<Func<T, SearchColumnDateField[]>> getter, DateTime defaultValue) where T : ISearchRowBasic
		{
			if (basic == null)
				return defaultValue;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return defaultValue;
		}
		
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnDoubleField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnDoubleField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnDoubleField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static Double? Get<T>(this T basic, Expression<Func<T, SearchColumnDoubleField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return null;
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static Double Get<T>(this T basic, Expression<Func<T, SearchColumnDoubleField[]>> getter, Double defaultValue) where T : ISearchRowBasic
		{
			if (basic == null)
				return defaultValue;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return defaultValue;
		}
		
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnTextNumberField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnTextNumberField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnTextNumberField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static String Get<T>(this T basic, Expression<Func<T, SearchColumnTextNumberField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0)
				return value[0].searchValue;
			else
				return null;
		}
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnLongField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnLongField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnLongField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static Int64? Get<T>(this T basic, Expression<Func<T, SearchColumnLongField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return null;
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static Int64 Get<T>(this T basic, Expression<Func<T, SearchColumnLongField[]>> getter, Int64 defaultValue) where T : ISearchRowBasic
		{
			if (basic == null)
				return defaultValue;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return defaultValue;
		}
		
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnStringField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnStringField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnStringField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static String Get<T>(this T basic, Expression<Func<T, SearchColumnStringField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0)
				return value[0].searchValue;
			else
				return null;
		}
		/// <summary>Specify that the column should should be returned in the search result.</summary>
		public static void Required<T>(this T basic, Expression<Func<T, SearchColumnBooleanField[]>> prop) where T : ISearchRowBasic
		{
			var column = new[] 
							{
								new SearchColumnBooleanField() // { customLabel = setter.Method.Name }
							};
			ReflectionHelper.GetSetter<T, SearchColumnBooleanField[]>(prop).Invoke(basic, column);
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static Boolean? Get<T>(this T basic, Expression<Func<T, SearchColumnBooleanField[]>> getter) where T : ISearchRowBasic
		{
			if (basic == null)
				return null;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return null;
		}
		
		/// <summary>Get the value of the specified search column</summary>
		public static Boolean Get<T>(this T basic, Expression<Func<T, SearchColumnBooleanField[]>> getter, Boolean defaultValue) where T : ISearchRowBasic
		{
			if (basic == null)
				return defaultValue;

			var value = getter.Compile().Invoke(basic);
			if (value != null && value.Length > 0 && value[0].searchValueSpecified)
				return value[0].searchValue;
			else
				return defaultValue;
		}
		
	
	}
}