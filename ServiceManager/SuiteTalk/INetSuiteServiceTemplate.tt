<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Web.Services" #>
<#@ assembly name="$(SolutionDir)ServiceManager.Design\$(OutDir)\ServiceManager.Design.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>using com.celigo.net.ServiceManager.SuiteTalk;
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Web.Services.Protocols" #>
//~ Generated by INetSuiteServiceTemplate.tt
#pragma warning disable 1591

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public interface INetSuiteService
	{
		INetSuiteService Clone();
		
<#	PushIndent("\t\t");
    
	Type svcType = typeof(NetSuiteService);
	
	WriteLine("// Properties" + Environment.NewLine);
    PropertyInfo[] properties = svcType.GetProperties();
    for (int i = 0; i < properties.Length; i++)
    {
        string propertyType = properties[i].PropertyType.FullName;
        string propertyName = properties[i].Name;
		#><#= propertyType #> <#= propertyName #> <#= GetPropertyGetterSetterString(properties[i]) #><#= Environment.NewLine #><#
    }
	
	WriteLine(Environment.NewLine + "// Web Service methods" + Environment.NewLine);
	
	MethodInfo[] methods = svcType.GetMethods();
    for (int i = 0; i < methods.Length; i++)
    	if (IsServiceMethod(methods[i]))
		{
			string returnType = methods[i].ReturnType == typeof(void)
									? "void"
									: methods[i].ReturnType.FullName;
			string methodName = methods[i].Name;
			#><#= returnType #> <#= methodName #>(<#= GetParameterString(methods[i]) #>);<#= Environment.NewLine #><#
    	}
	
	ClearIndent();
	#>
	}
	
	public partial class NetSuiteService : INetSuiteService
	{
		public INetSuiteService Clone()
		{
			return new NetSuiteService();
		}
	}
}
<#+
	private string GetPropertyGetterSetterString(PropertyInfo property)
	{
		return property.CanWrite && property.CanRead ? "{ get; set; }" : "{ get; }";
	}
		
	private string GetParameterString(MethodInfo methodInfo)
    {
        var parameters = methodInfo.GetParameters();
        if (parameters.Length > 0)
        {
            var sb = new System.Text.StringBuilder(20);
            AppendParameter(parameters[0], sb);
            for (int i = 1; i < parameters.Length; i++)
            {
                sb.Append(", ");
                AppendParameter(parameters[i], sb);
            }
            return sb.ToString();
        }
        else
            return string.Empty;
    }

	private bool IsServiceMethod(MethodInfo method)
	{
		return !method.IsConstructor 
				&& !method.IsSpecialName
				&& !method.IsStatic
                && method.GetCustomAttributes(typeof(SoapDocumentMethodAttribute), true).Length > 0;
	}
	
    private static void AppendParameter(ParameterInfo parameter, System.Text.StringBuilder sb)
    {
        sb.Append(parameter.ParameterType.FullName);
        sb.Append(" ");
        sb.Append(parameter.Name);
    }
#>