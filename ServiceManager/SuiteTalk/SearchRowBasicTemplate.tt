<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\0" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ assembly name="System.Web.Services" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(SolutionDir)ServiceManager.Design\$(OutDir)\ServiceManager.Design.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>using com.celigo.net.ServiceManager.SuiteTalk;
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
	var template = new RecordExtenderTemplate();

	foreach (var typeInfo in GetSearchRowTypes())
	{
		template.BasicType = typeInfo;
		template.SupportsCustomFields = null != typeInfo.GetProperty("customFieldList");
		template.Output.File = typeInfo.Name + ".cs";
		template.Render();		 
	}
#><#+
public class RecordExtenderTemplate : Template
{
	public Type BasicType { get; set; }
	public bool SupportsCustomFields { get; set; }
	
	public override string TransformText()
	{
#>//~ Generated by SearchRowBasicTemplate.tt
#pragma warning disable 1591
using System;

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public partial class <#= BasicType.Name #> : ISearchRowBasic<#= SupportsCustomFields ? ", ISupportsCustomFields<SearchColumnCustomField>" : ""#>
	{
<#+
		if (SupportsCustomFields)
		{
#>
        /// <summary>
        /// Gets custom field with the given ID or <c>null</c> if a field with the
        /// given ID was not found.
        /// </summary>
        public T FindCustomField<T>(string fieldId) where T : SearchColumnCustomField
		{
			T match = null;
			if (null != this.customFieldList)
			{
				match = (T)Array.Find(
									this.customFieldList, 
									f => f is T && f.GetInternalId() == fieldId);
			}				
			return match;
		}
			
        /// <summary>
        /// Gets custom field with the given ID or <c>null</c> if a field with the
        /// given ID was not found.
        /// </summary>
        public SearchColumnCustomField FindCustomField(string fieldId)
		{
			SearchColumnCustomField match = null;
			if (null != this.customFieldList)
			{
				match = Array.Find(
									this.customFieldList, 
									f => f.GetInternalId() == fieldId);
			}				
			return match;
		}
<#+
		}
#>
	}
}
<#+	
		return this.GenerationEnvironment.ToString();
	}
}
#>

<#+
	IEnumerable<Type> GetSearchRowTypes()
	{
		var assembly = typeof(Record).Assembly;
		
		var query = from t in assembly.GetTypes()
					where t.IsClass && t.Name.EndsWith("SearchRowBasic")
					select t;
		
		return query.AsEnumerable<Type>();
	}
#>