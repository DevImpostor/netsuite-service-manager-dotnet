<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Dynamic" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>
<#
	var template = new SearchFieldExtenderTemplate();

	foreach (dynamic t in GetSearchFieldTypes())
	{
		template.ObjectInfo = t;
		template.Output.File = t.Type.Name + ".gen.cs";
		template.Render();		 
	}
#><#+
public class SearchFieldExtenderTemplate : Template
{
	public dynamic ObjectInfo { get; set; }
	
	public override string TransformText()
	{
		bool isSpecifiedRequired = !ObjectInfo.SearchValueType.IsClass;
		string searchValueEffectiveType = ObjectInfo.SearchValueType.Name + (isSpecifiedRequired ? "?" : "");
		string referenceType = "IReference" + (ObjectInfo.SearchValueType.IsArray ? "[]" : "");
#>//~ Generated by ISupportSearchValueNTemplate.tt
#if !FIRSTBUILD
#pragma warning disable 1591
using System;

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public partial class <#= ObjectInfo.Type.Name #> 
		: ISupportSearchValue< <#= searchValueEffectiveType #> > <#+ 
			if (ObjectInfo.IsReferenceType) {#>,  
			ISupportReferenceSearchValue< <#= referenceType #> > <#+  
			} 
			if (ObjectInfo.HasOperator) {#>,  
			ISupportSearchOperator< <#= ObjectInfo.OperatorType #> > <#+  
			}
			if (ObjectInfo.HasSearchValue2) {#>, 
			ISupportSearchValue2< <#= searchValueEffectiveType #> > <#+ 
			} 
			#>

	{ 
		public <#= searchValueEffectiveType #> GetSearchValue()
		{
			<#+ if (isSpecifiedRequired) 
			{ 
			#>if (!this.searchValueFieldSpecified)
			{
				return null;
			}
			<#+ 
			} 
			#>return this.searchValue;
		}
		
		<#+ if (ObjectInfo.IsReferenceType) { #>
		
		<#= referenceType #> ISupportReferenceSearchValue< <#= referenceType #> >.GetSearchValue()
		{
			return this.searchValue;
		}
		<#+ } #>
		
		public void SetSearchValue(<#= searchValueEffectiveType #> value)
		{
			<#+ if (isSpecifiedRequired) 
			{ 
			#>this.searchValue = value.GetValueOrDefault();
			this.searchValueSpecified = (null != value && value.HasValue); <#+ 
			} 
			else
			{
			#>this.searchValue = value; <#+ 
			}
			#>
			
		}
		
		<#+ 
			if (ObjectInfo.HasSearchValue2) 
			{ 
		#>
		
		public <#= searchValueEffectiveType #> GetSearchValue2()
		{
			<#+ if (isSpecifiedRequired) 
			{ 
			#>if (!this.searchValue2FieldSpecified)
			{
				return null;
			}
			<#+ 
			} 
			#>return this.searchValue;
		}
		
		public void SetSearchValue2(<#= searchValueEffectiveType #> value)
		{
			<#+ if (isSpecifiedRequired) 
			{ 
			#>this.searchValue2 = value.GetValueOrDefault();
			this.searchValue2Specified = (null != value && value.HasValue);<#+ 
			} 
			else
			{
			#>this.searchValue2 = value;<#+
			}
			#>
			
		}<#+
			}
		#>
		
	}
}
#endif
<#+	
		return this.GenerationEnvironment.ToString();
	}
}
#>

<#+
	IEnumerable<dynamic> GetSearchFieldTypes()
	{
		var assembly = typeof(CustomFieldRef).Assembly;
		
		var query = from t in assembly.GetTypes()
					where t.BaseType == typeof(SearchCustomField) || (t.Name.StartsWith("Search") && t.Name.EndsWith("Field"))
					select t;
		
		foreach (var t in query)
		{
			bool isRelevant = false;
			
			dynamic retVal = new ExpandoObject();
			retVal.Type = t;
			
			// Operator Property
			var operatorProperty = t.GetProperty("operator");
			retVal.HasOperator   = null != operatorProperty;
			
			if (retVal.HasOperator)
			{
				retVal.OperatorType = operatorProperty.PropertyType;
				isRelevant = true;
			}	
			
			// Search Value Property
			var searchValueProperty = t.GetProperty("searchValue");
			if (searchValueProperty != null)
			{
				retVal.SearchValueType = searchValueProperty.PropertyType;
				
				var elementType = searchValueProperty.PropertyType.IsArray 
									? searchValueProperty.PropertyType.GetElementType()  
									: searchValueProperty.PropertyType;
				retVal.IsReferenceType = typeof(IReference).IsAssignableFrom(elementType);
				isRelevant = true;
			}
			else		
			{
				Debug.WriteLine("No searchValue property in " + t.Name);
			}
					
			// Search Value2 Property
			var searchValue2Property = t.GetProperty("searchValue2");
			retVal.HasSearchValue2 = (searchValue2Property != null);			
			
			// Return if only relevant to this code generation
			if (isRelevant)
				yield return retVal;
		}
	}
#>