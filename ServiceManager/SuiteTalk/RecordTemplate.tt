<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ assembly name="System.Web.Services" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>using com.celigo.net.ServiceManager.SuiteTalk;
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
	var template = new RecordExtenderTemplate();

	foreach (var typeInfo in GetRecordTypes())
	{
		template.TargetType = typeInfo.TargetType;
		template.TypeName   = typeInfo.TypeName;
		template.SupportsCustomFields = SupportsCustomFields(typeInfo.TargetType);
		template.Output.File = typeInfo.TypeName + ".gen.cs";
		template.Render();		 
	}
#><#+
public class RecordExtenderTemplate : Template
{
	public Type TargetType { get; set; }
	public string TypeName { get; set; }
	public bool SupportsCustomFields { get; set; }
	
	public override string TransformText()
	{
		bool hasInternalId = null != TargetType.GetProperty("internalId");
		
#>//~ Generated by RecordTemplate.tt
#if !FIRSTBUILD
#pragma warning disable 1591
using System;

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public partial class <#= TypeName #><#= SupportsCustomFields ? " : ISupportsCustomFields<CustomFieldRef>" : ""#>
	{
		/// <summary>
		/// Gets the Internal ID.
		/// </summary>
		/// <returns>The Internal ID of the record.</returns>
		public override string GetInternalId()
		{
<#+ 		if (hasInternalId) 
			{ 
#>
			return this.internalIdField;
<#+ 
			}
			else
			{
#>
			return null;
<#+ 
			}
#>
		}

		/// <summary>
		/// Sets the Internal ID.
		/// </summary>
		/// <param name="id">The Internal ID.</param>
		public override void SetInternalId(string id)
		{
<#+ 		
			if (hasInternalId) 
			{ 
#>
			this.internalIdField = id;
<#+ 
			}
#>
		}
			
<#+ 
		if (SupportsCustomFields)
		{
#>
		/// <summary>
		/// Gets custom field with the given ID or <c>null</c> if a field with the
		/// given ID was not found.
		/// </summary>
		public T FindCustomField<T>(string fieldId) where T: CustomFieldRef
		{
			T match = null;
			if (null != this.customFieldList)
			{
				match = (T)Array.Find(
									this.customFieldList, 
									f => f is T && f.GetInternalId() == fieldId);
			}				
			return match;
		}
			
        /// <summary>
        /// Gets custom field with the given ID or <c>null</c> if a field with the
        /// given ID was not found.
        /// </summary>
        public CustomFieldRef FindCustomField(string fieldId)
		{
			CustomFieldRef match = null;
			if (null != this.customFieldList)
			{
				match = Array.Find(
									this.customFieldList, 
									f => f.GetInternalId() == fieldId);
			}				
			return match;
		}
<#+
		}
#>
	}
}
#endif
<#+	
		return this.GenerationEnvironment.ToString();
	}
}
#>

<#+
	IEnumerable<dynamic> GetRecordTypes()
	{
		var assembly = typeof(Record).Assembly;
		
		var query = from t in assembly.GetTypes()
					where t.BaseType == typeof(Record)
					select new { TargetType = t, TypeName = t.Name };
		
		return query.AsEnumerable<dynamic>();
	}
	
	bool SupportsCustomFields(Type targetType)
	{
		var custFieldListProperty = targetType.GetProperty("customFieldList");
		return null != custFieldListProperty
				&& typeof(CustomFieldRef) == custFieldListProperty.PropertyType.GetElementType();
	}
#>