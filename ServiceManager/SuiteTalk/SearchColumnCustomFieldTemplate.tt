<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ assembly name="System.Web.Services" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
	var template = new CustomFieldExtenderTemplate();

	foreach (Type type in GetCustomFieldTypes())
	{
		template.TargetType = type;
		template.Output.File = type.Name + ".gen.cs";
		template.Render();		 
	}
#><#+
public class CustomFieldExtenderTemplate : Template
{
	public Type TargetType { get; set; }
	
	public override string TransformText()
	{
#>//~ Generated by SearchColumnCustomFieldTemplate.tt
#pragma warning disable 1591

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public partial class <#= TargetType.Name #>
	{
		/// <summary>
		/// Gets the Internal ID.
		/// </summary>
		/// <returns>The Internal ID of the record.</returns>
		public override string GetInternalId()
		{
			return this.internalId;
		}

		/// <summary>
		/// Sets the Internal ID.
		/// </summary>
		/// <param name="id">The Internal ID.</param>
		public override void SetInternalId(string id)
		{
			this.internalId = id;
		}
	}
}
<#+	
		return this.GenerationEnvironment.ToString();
	}
}
#>

<#+
	IEnumerable<Type> GetCustomFieldTypes()
	{
		var assembly = typeof(SearchColumnCustomField).Assembly;
		
		var query = from t in assembly.GetTypes()
					where t.BaseType == typeof(SearchColumnCustomField)
					select t;
		
		foreach (var t in query)
			yield return t;
	}
#>