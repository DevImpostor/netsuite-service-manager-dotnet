<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ assembly name="System.Web.Services" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
	var template = new RecordExtenderTemplate();

	foreach (var typeInfo in GetSearchTypes())
	{
		template.TargetType = typeInfo;
		
		Type basicType = Assembly.GetAssembly(typeof(Record)).GetType("com.celigo.net.ServiceManager.SuiteTalk." + typeInfo.Name + "Basic");
		template.SupportsCustomFields = basicType.GetProperty("customFieldList") != null;
		template.Output.File = typeInfo.Name + ".gen.cs";
		template.Render();		 
	}
#><#+
public class RecordExtenderTemplate : Template
{
	public Type TargetType { get; set; }
	public bool SupportsCustomFields { get; set; }
	
	public override string TransformText()
	{
#>//~ Generated by SearchRecordTemplate.tt
#if !FIRSTBUILD
#pragma warning disable 1591
using System;

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public partial class <#= TargetType.Name #>Basic : ISearchBasic<#+if (SupportsCustomFields){#>, ISupportsCustomFields<SearchCustomField><#+}#>	
	{<#+ 	
		if (SupportsCustomFields)
		{#>
			
		/// <summary>
		/// Gets custom field with the given ID or <c>null</c> if a field with the
		/// given ID was not found.
		/// </summary>
		public T FindCustomField<T>(string fieldId) where T: SearchCustomField
		{
			T match = null;
			if (null != this.customFieldList)
			{
				match = (T)Array.Find(
									this.customFieldList, 
									f => f is T && f.GetInternalId() == fieldId);
			}				
			return match;
		}
			
        /// <summary>
        /// Gets custom field with the given ID or <c>null</c> if a field with the
        /// given ID was not found.
        /// </summary>
        public SearchCustomField FindCustomField(string fieldId)
		{
			SearchCustomField match = null;
			if (null != this.customFieldList)
			{
				match = Array.Find(
									this.customFieldList, 
									f => f.GetInternalId() == fieldId);
			}				
			return match;
		}<#+		
		} 
#>	}

	public partial class <#= TargetType.Name #> : ISearchRecord
	{
		/// <summary>
		/// Gets the basic search criteria.
		/// </summary>
		/// <returns>The basic search criteria</returns>
		public ISearchBasic GetSearchBasic()
		{
			return this.basic;
		}
			
		/// <summary>
		/// Gets the basic search criteria.
		/// </summary>
		/// <param name="create">if set to <c>true</c> creates the basic criteria if null.</param>
		/// <returns>The basic search criteria</returns>
		public ISearchBasic GetSearchBasic(bool create)
		{
			if (create && this.basic == null)
				this.basic = new <#= TargetType.Name #>Basic();
			return this.basic;
		}
	}
}	
#endif
<#+	
		return this.GenerationEnvironment.ToString();
	}
}
#>
<#+
	IEnumerable<Type> GetSearchTypes()
	{
		var assembly = typeof(Record).Assembly;
		
		var query = from t in assembly.GetTypes()
					where t.Name.EndsWith("Search")
					select t;
		
		return query.AsEnumerable<Type>();
	}
#>