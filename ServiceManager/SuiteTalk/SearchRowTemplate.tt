<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ assembly name="System.Web.Services" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
	var template = new RecordExtenderTemplate();

	foreach (var typeInfo in GetSearchRowTypes())
	{
		template.TargetType = typeInfo;
		template.Output.File = typeInfo.Name + ".gen.cs";
		template.Render();		 
	}
#><#+
public class RecordExtenderTemplate : Template
{
	public Type TargetType { get; set; }
	
	public override string TransformText()
	{
#>//~ Generated by SearchRowTemplate.tt
#if !FIRSTBUILD

#pragma warning disable 1591
using System;

namespace com.celigo.net.ServiceManager.SuiteTalk
{
	public partial class <#= TargetType.Name #> : ISearchRow
	{
		/// <summary>Gets the Search Row Basic value.</summary>
		/// <returns>The ISearchRowBasic assigned to this row.</returns>
		public ISearchRowBasic GetSearchRowBasic()
		{
			return this.basic;
		}

		/// <summary>
		/// Sets the Search Row Basic value.
		/// </summary>
		/// <param name="basic">The ISearchRowBasic to be assigned to this row.</param>
		public void SetSearchRowBasic(ISearchRowBasic basic)
		{
			if (basic is <#= TargetType.Name #>Basic)
				this.basic = (<#= TargetType.Name #>Basic)basic;
			else
				throw new ArgumentException("Value should be of type <#= TargetType.Name #>Basic", "basic");
		}
	}
}
	
#endif
<#+	
		return this.GenerationEnvironment.ToString();
	}
}
#>

<#+
	IEnumerable<Type> GetSearchRowTypes()
	{
		var assembly = typeof(Record).Assembly;
		
		var query = from t in assembly.GetTypes()
					where t.BaseType == typeof(SearchRow) && t.Name != "SearchRowBasic"
					select t;
		
		return query.AsEnumerable<Type>();
	}
#>