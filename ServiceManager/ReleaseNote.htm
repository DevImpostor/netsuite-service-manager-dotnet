<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
		<style type="text/css">
			.style1
			{
				font-family: "Courier New", Courier, monospace;
			}
		</style>
	</head>
	<body style="font-family: Arial, Helvetica, sans-serif">
	<h2>Version 2.2.2</h2>
		<ul>
			<li>Fixed an issue with ISupportSearchValue2&lt;T&gt; where the first search value was 
				being returned instead of the second.</li>
			<li>SearchXxField and SearchCustomField now have a common IBasicSearchField 
				interface.</li>
		</ul>
		<h2>Version 2.2.1</h2>
		<ul>
			<li>New generic Interfaces added to expose common search fields<ul>
				<li>ISupportSearchOperator&lt;T&gt;, ISupportSearchValue&lt;T&gt;, ISupportSearchValue2&lt;T&gt;</li>
				</ul>
			</li>
		</ul>
		<h2>Version 2.2.0</h2>
	
		<h3>New Features</h3>
		<h4>Core Library</h4>
		<ul>
			<li>Support for NetSuite Async methods</li>
			<li>The new <strong>StatusResponse</strong> static class contains utility methods 
				to,<ul>
					<li>&nbsp;examine a Webservices response for error reports, warnings</li>
					<li>retrieve all status details as a concatanated string</li>
					<li>convert the response to a <strong>StatusErrorException</strong> with the 
						concatanated status detail string as the exception&#39;s description</li>
				</ul>
			</li>
			<li>Supports configuring via app.config or web.config files<ul>
				<li>Do not use the config files to store the password in plain text. Add custom 
					logic in your code to inject the password or to decrypt an encrypted password 
					read off the file</li>
				</ul>
			</li>
			<li>Pre / post processing and error handling via events<ul>
				<li><strong>NetSuiteServiceBase</strong>&nbsp; (base class for the ServiceManager 
					and ServicePool) exposes 3 events (OnBeforeServicesInvocation, 
					OnAfterServiceInvocation, OnServiceInvocationError) that makes it possible for 
					your code to be notified before and after a webservice request is made and also 
					to handle an error returned by NetSuite during the invocation. This is useful in 
					GUI apps (for notifying end-users), logging, forcing retries or for last minute 
					adjustment to data sent/received.</li>
				<li>Additionally, the <strong>NetSuiteServiceManager</strong> raises Before/After 
					Batch Upload/Delete events when it processes records in batches (i.e. when 
					processing AddList/UpdateList/DeleteList requests that contain more records than 
					Add/Update/DeleteRequestSize setting).</li>
				</ul>
			</li>
			<li><strong>CustomFieldDictionary</strong> is a read/write dictionary of custom 
				fields that simplifies working with Custom Field lists on entity records<ul>
					<li>Create the dictionary from an entity records (e.g. retrieved via Get(..) ) as
						<span class="style1">var customFields = new 
						CustomFieldDictionary(rec.customFieldList)</span><ul>
							<li>Use GetLong(customFieldId), GetBoolean(customFieldId), etc methods to easily 
								retrieve the field value. The methods returns nullable values and does not throw 
								exceptions if the value does not exist.</li>
						</ul>
					</li>
					<li>In order to add a new custom fields list to a record, start with an empty 
						dictionary as <span class="style1">var customFields = new 
						CustomFieldDictionary()</span><ul>
							<li>Use SetValue(fieldId, ...) methods to assign values. The methods will generate 
								the appropriate CustomFieldRef&nbsp; based on the supplied value.</li>
							<li>When done, assign the field list to the entity record as <span class="style1">
								rec.customFieldList = customFields.ToArray()</span></li>
						</ul>
					</li>
				</ul>
			</li>
			<li>Added frequently used methods to Record, BaseRef, and other base classes<ul>
				<li>E.g. GetInternalId(), SetInternalId()</li>
				</ul>
			</li>
			<li>New Interfaces introduced to ease the writing of reusable code<ul>
				<li>E.g. ISearchAdvanced, ISearchCustomField, ISearchRecord, ISupportsCustomFields</li>
				</ul>
			</li>
		</ul>
		<h4>
			Service Manager Utility Library (Experimental)</h4>
		<ul>
			<li>SearchRowCustomFieldDictionary: Similar to the CustomFieldDictionary but, for 
				working with Advanced Search results</li>
			<li>Added extension methods to simplify the extraction of custom field values off 
				Advanced Search restults</li>
			<li>Added extension methods to simplify the extaction of standard field values off 
				Advanced Search results</li>
			<li>Added GetValue, SetValue extension methods to simplify working with Custom 
				Fields</li>
		</ul>
		<h3>
			Notable Changes</h3>
		<ul>
			<li>Built for NetSuite WSDL 2011.1</li>
			<li>Optimized for .NET 3.5 utilizing extension methods and lambdas</li>
			<li>Improved performance by minimizing reflection favoring lambdas and code 
				generation where applicable</li>
			<li>ServiceManager and the ServicePool classes have been redesigned to support for 
				depenancy injection and mocking for better unit testability of your code.
				You can now test your code without having to make actual Webservices calls.</li>
			<li>Uses Request Level Authentication by default.<ul>
				<li>When explicit login/logoff is required or when you want to maintain an explicit 
					session, use the CreateSession, CloseSession and AdoptSession methods.</li>
				</ul>
			</li>
			<li>Removed dependancy on log4net.<ul>
				<li>The Service Manager library no longer implicitly logs it&#39;s activity (it uses a 
					NullLogger by default). If you need logging you can provide a logger in the 
					constructor of the NetSuiteServiceBase.</li>
				</ul>
			</li>
			<li>Removed superfluous properties that wrapped standard Perference and 
				SearchPreference properties (e.g. IgnoreReadOnlyFields, SearchPageSize, etc.). 
				Instead, standard Preference and SearchPreference properties have been exposed.</li>
			<li>Other minor enhancemen<ul>
				<li>RecordRef.ToString() now returns &quot;<em>&lt;Internal ID&gt; &lt;name&gt;</em>&quot;</li>
				</ul>
			</li>
		</ul>
	
	</body>
</html>