<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".gen.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="com.celigo.net.ServiceManager" #>
//~ Generated by NetSuiteServiceBaseTemplate.tt
#if !FIRSTBUILD
#pragma warning disable 1591
using System;
using com.celigo.net.ServiceManager.SuiteTalk;

namespace com.celigo.net.ServiceManager
{
	public abstract partial class NetSuiteServiceBase
	{
<#
	MethodInfo[] methods = typeof(INetSuiteServiceBase).GetMethods();
	var exclusionList = new string[] { "Search", "CreateSession" };
	
	foreach (var mtd in methods)
	{
		if (mtd.IsSpecialName || exclusionList.Contains(mtd.Name))
			continue;
		
		var parameters = mtd.GetParameters();
		
		string paramString;
		string paramValueString;
		
		if (parameters.Length == 0)
		{
			paramString = string.Empty;
			paramValueString = string.Empty;
		}
		else
		{
			var sb = new StringBuilder();
			var valueSb = new StringBuilder();
			
			sb.AppendFormat("{0} {1}", parameters[0].ParameterType.Name, parameters[0].Name);
			valueSb.Append(parameters[0].Name);
			for (int i = 1; i < parameters.Length; i++)
			{
			 	sb.AppendFormat(", {0} {1}", parameters[i].ParameterType.Name, parameters[i].Name);
				valueSb.AppendFormat(", {0}", parameters[i].Name);
			}
			paramString = sb.ToString();
			paramValueString = valueSb.ToString();
		}
		
		bool isFunction = mtd.ReturnType != typeof(void);
		bool isBulkOp	= mtd.ReturnType.IsArray;
		bool isSingleParam = parameters.Length == 1;
		
		if (isFunction)
		{
#>
		public virtual <#= mtd.ReturnType.Name #> <#= mtd.Name #>(<#= paramString #>)
		{
<#
			if (isBulkOp && isSingleParam)
			{
#>
			if (<#= parameters[0].Name #> == null || <#= parameters[0].Name #>.Length == 0)
				return new <#= mtd.ReturnType.GetElementType().Name #>[0];
<#
			}
		
			if (parameters.Length == 0)
			{
#>
			return InvokeService< <#= mtd.ReturnType.Name #> >(null, "<#= GetLowerCamelCaseName(mtd.Name) #>");
<#
			}
			else if (isSingleParam)
			{
#>
			return InvokeService< <#= mtd.ReturnType.Name #> >(<#= parameters[0].Name #>, "<#= GetLowerCamelCaseName(mtd.Name) #>");
<#
			}
			else if (parameters.Length > 1)
			{
#>
			return InvokeService< <#= mtd.ReturnType.Name #> >(
													new object[] {
														<#= paramValueString #>
													},
													"<#= GetLowerCamelCaseName(mtd.Name) #>"
												);
<#
			}
#>
		}
		
<#
		}
	}
#>	
	}
}
#endif
<#+
	private string GetLowerCamelCaseName(string name)
	{
		return char.ToLower(name[0]) + name.Substring(1);
	}
#>