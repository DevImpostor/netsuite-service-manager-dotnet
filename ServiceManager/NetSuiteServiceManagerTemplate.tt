<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".write.gen.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="com.celigo.net.ServiceManager" #>
<#@ import namespace="com.celigo.net.ServiceManager.SuiteTalk" #>
//~ Generated by NetSuiteServiceManagerTemplate.tt
#pragma warning disable 1591
using System;
using com.celigo.net.ServiceManager.SuiteTalk;

namespace com.celigo.net.ServiceManager
{
	public partial class NetSuiteServiceManager
	{
#if !FIRSTBUILD
<#
	var supportedMthds = new [] { "AddList", "UpdateList", "UpsertList", "DeleteList" };
	var methods = from m in typeof(INetSuiteServiceBase).GetMethods()
				  let p = m.GetParameters()
				  where p.Length == 1 && p[0].ParameterType.IsArray && supportedMthds.Contains(m.Name)
				  select m;
	foreach (MethodInfo mtd in methods)
	{
		ParameterInfo param = mtd.GetParameters()[0];
#>
        public override <#= mtd.ReturnType.Name #> <#= mtd.Name #>(<#= param.ParameterType.Name #> <#= param.Name #>)
        {
            if (<#= param.Name #> == null || <#= param.Name #>.Length == 0)
                return new <#= mtd.ReturnType.GetElementType().Name #>[0];
<#		if (param.ParameterType == typeof(Record[])) { #>
            return ProcessRecordInBatchMode(<#= param.Name #>, "<#= GetLowerCamelCaseName(mtd.Name) #>");
<# 		} else if (mtd.Name == "DeleteList") { #>
			return ProcessRecordDeletesInBatchMode(<#= param.Name #>, "deleteList");
<# 		} #>
        }
<#
	}
#>
#endif
	}
}
<#+
	private string GetLowerCamelCaseName(string name)
	{
		return char.ToLower(name[0]) + name.Substring(1);
	}
#>