 
//~ Generated by NetSuiteServiceBaseTemplate.tt
#if !FIRSTBUILD
#pragma warning disable 1591
using System;
using com.celigo.net.ServiceManager.SuiteTalk;

namespace com.celigo.net.ServiceManager
{
	public abstract partial class NetSuiteServiceBase
	{
		public virtual GetServerTimeResult GetServerTime()
		{
			return InvokeService< GetServerTimeResult >(null, "getServerTime");
		}
		
		public virtual WriteResponse Add(Record record)
		{
			return InvokeService< WriteResponse >(record, "add");
		}
		
		public virtual WriteResponse[] AddList(Record[] records)
		{
			if (records == null || records.Length == 0)
				return new WriteResponse[0];
			return InvokeService< WriteResponse[] >(records, "addList");
		}
		
		public virtual WriteResponse Attach(AttachReference attachRef)
		{
			return InvokeService< WriteResponse >(attachRef, "attach");
		}
		
		public virtual WriteResponse Delete(BaseRef baseRef)
		{
			return InvokeService< WriteResponse >(baseRef, "delete");
		}
		
		public virtual WriteResponse[] DeleteList(BaseRef[] baseRefs)
		{
			if (baseRefs == null || baseRefs.Length == 0)
				return new WriteResponse[0];
			return InvokeService< WriteResponse[] >(baseRefs, "deleteList");
		}
		
		public virtual WriteResponse Detach(AttachReference attachRef)
		{
			return InvokeService< WriteResponse >(attachRef, "detach");
		}
		
		public virtual ReadResponse Get(BaseRef baseRef)
		{
			return InvokeService< ReadResponse >(baseRef, "get");
		}
		
		public virtual GetAllResult GetAll(GetAllRecord gar)
		{
			return InvokeService< GetAllResult >(gar, "getAll");
		}
		
		public virtual GetCustomizationIdResult GetCustomizationId(CustomizationType customization, Boolean includeInactives)
		{
			return InvokeService< GetCustomizationIdResult >(
													new object[] {
														customization, includeInactives
													},
													"getCustomizationId"
												);
		}
		
		public virtual GetDeletedResult GetDeleted(GetDeletedFilter filter)
		{
			return InvokeService< GetDeletedResult >(filter, "getDeleted");
		}
		
		public virtual ReadResponse[] GetList(BaseRef[] baseRefs)
		{
			if (baseRefs == null || baseRefs.Length == 0)
				return new ReadResponse[0];
			return InvokeService< ReadResponse[] >(baseRefs, "getList");
		}
		
		public virtual ReadResponse Initialize(InitializeRecord record)
		{
			return InvokeService< ReadResponse >(record, "initialize");
		}
		
		public virtual ReadResponse[] InitializeList(InitializeRecord[] records)
		{
			if (records == null || records.Length == 0)
				return new ReadResponse[0];
			return InvokeService< ReadResponse[] >(records, "initializeList");
		}
		
		public virtual GetItemAvailabilityResult GetItemAvailability(ItemAvailabilityFilter itemAvailabilityFilter)
		{
			return InvokeService< GetItemAvailabilityResult >(itemAvailabilityFilter, "getItemAvailability");
		}
		
		public virtual GetBudgetExchangeRateResult GetBudgetExchangeRate(BudgetExchangeRateFilter budgetExchangeRateFilter)
		{
			return InvokeService< GetBudgetExchangeRateResult >(budgetExchangeRateFilter, "getBudgetExchangeRate");
		}
		
		public virtual GetConsolidatedExchangeRateResult GetConsolidatedExchangeRate(ConsolidatedExchangeRateFilter consolidatedExchangeRateFilter)
		{
			return InvokeService< GetConsolidatedExchangeRateResult >(consolidatedExchangeRateFilter, "getConsolidatedExchangeRate");
		}
		
		public virtual WriteResponse UpdateInviteeStatus(UpdateInviteeStatusReference updateInviteeStatusReference)
		{
			return InvokeService< WriteResponse >(updateInviteeStatusReference, "updateInviteeStatus");
		}
		
		public virtual WriteResponse[] updateInviteeStatusList(UpdateInviteeStatusReference[] updateInviteeStatusReference)
		{
			if (updateInviteeStatusReference == null || updateInviteeStatusReference.Length == 0)
				return new WriteResponse[0];
			return InvokeService< WriteResponse[] >(updateInviteeStatusReference, "updateInviteeStatusList");
		}
		
		public virtual WriteResponse Update(Record record)
		{
			return InvokeService< WriteResponse >(record, "update");
		}
		
		public virtual WriteResponse[] UpdateList(Record[] records)
		{
			if (records == null || records.Length == 0)
				return new WriteResponse[0];
			return InvokeService< WriteResponse[] >(records, "updateList");
		}
		
		public virtual WriteResponse upsert(Record record)
		{
			return InvokeService< WriteResponse >(record, "upsert");
		}
		
		public virtual WriteResponse[] UpsertList(Record[] records)
		{
			if (records == null || records.Length == 0)
				return new WriteResponse[0];
			return InvokeService< WriteResponse[] >(records, "upsertList");
		}
		
		public virtual GetSavedSearchResult GetSavedSearch(GetSavedSearchRecord record)
		{
			return InvokeService< GetSavedSearchResult >(record, "getSavedSearch");
		}
		
		public virtual GetSelectValueResult GetSelectValue(GetSelectValueFieldDescription fieldDescription, Int32 pageIndex)
		{
			return InvokeService< GetSelectValueResult >(
													new object[] {
														fieldDescription, pageIndex
													},
													"getSelectValue"
												);
		}
		
		public virtual GetPostingTransactionSummaryResult GetPostingTransactionSummary(PostingTransactionSummaryField fields, PostingTransactionSummaryFilter filters, Int32 pageIndex)
		{
			return InvokeService< GetPostingTransactionSummaryResult >(
													new object[] {
														fields, filters, pageIndex
													},
													"getPostingTransactionSummary"
												);
		}
		
	
	}
}
#endif
